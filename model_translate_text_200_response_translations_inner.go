/*
DeepL API

The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TranslateText200ResponseTranslationsInner struct for TranslateText200ResponseTranslationsInner
type TranslateText200ResponseTranslationsInner struct {
	DetectedSourceLanguage NullableSourceLanguage `json:"detected_source_language,omitempty"`
	// The translated text.
	Text *string `json:"text,omitempty"`
}

// NewTranslateText200ResponseTranslationsInner instantiates a new TranslateText200ResponseTranslationsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateText200ResponseTranslationsInner() *TranslateText200ResponseTranslationsInner {
	this := TranslateText200ResponseTranslationsInner{}
	return &this
}

// NewTranslateText200ResponseTranslationsInnerWithDefaults instantiates a new TranslateText200ResponseTranslationsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateText200ResponseTranslationsInnerWithDefaults() *TranslateText200ResponseTranslationsInner {
	this := TranslateText200ResponseTranslationsInner{}
	return &this
}

// GetDetectedSourceLanguage returns the DetectedSourceLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TranslateText200ResponseTranslationsInner) GetDetectedSourceLanguage() SourceLanguage {
	if o == nil || o.DetectedSourceLanguage.Get() == nil {
		var ret SourceLanguage
		return ret
	}
	return *o.DetectedSourceLanguage.Get()
}

// GetDetectedSourceLanguageOk returns a tuple with the DetectedSourceLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TranslateText200ResponseTranslationsInner) GetDetectedSourceLanguageOk() (*SourceLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return o.DetectedSourceLanguage.Get(), o.DetectedSourceLanguage.IsSet()
}

// HasDetectedSourceLanguage returns a boolean if a field has been set.
func (o *TranslateText200ResponseTranslationsInner) HasDetectedSourceLanguage() bool {
	if o != nil && o.DetectedSourceLanguage.IsSet() {
		return true
	}

	return false
}

// SetDetectedSourceLanguage gets a reference to the given NullableSourceLanguage and assigns it to the DetectedSourceLanguage field.
func (o *TranslateText200ResponseTranslationsInner) SetDetectedSourceLanguage(v SourceLanguage) {
	o.DetectedSourceLanguage.Set(&v)
}
// SetDetectedSourceLanguageNil sets the value for DetectedSourceLanguage to be an explicit nil
func (o *TranslateText200ResponseTranslationsInner) SetDetectedSourceLanguageNil() {
	o.DetectedSourceLanguage.Set(nil)
}

// UnsetDetectedSourceLanguage ensures that no value is present for DetectedSourceLanguage, not even an explicit nil
func (o *TranslateText200ResponseTranslationsInner) UnsetDetectedSourceLanguage() {
	o.DetectedSourceLanguage.Unset()
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TranslateText200ResponseTranslationsInner) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateText200ResponseTranslationsInner) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TranslateText200ResponseTranslationsInner) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TranslateText200ResponseTranslationsInner) SetText(v string) {
	o.Text = &v
}

func (o TranslateText200ResponseTranslationsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DetectedSourceLanguage.IsSet() {
		toSerialize["detected_source_language"] = o.DetectedSourceLanguage.Get()
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableTranslateText200ResponseTranslationsInner struct {
	value *TranslateText200ResponseTranslationsInner
	isSet bool
}

func (v NullableTranslateText200ResponseTranslationsInner) Get() *TranslateText200ResponseTranslationsInner {
	return v.value
}

func (v *NullableTranslateText200ResponseTranslationsInner) Set(val *TranslateText200ResponseTranslationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateText200ResponseTranslationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateText200ResponseTranslationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateText200ResponseTranslationsInner(val *TranslateText200ResponseTranslationsInner) *NullableTranslateText200ResponseTranslationsInner {
	return &NullableTranslateText200ResponseTranslationsInner{value: val, isSet: true}
}

func (v NullableTranslateText200ResponseTranslationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateText200ResponseTranslationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


