/*
DeepL API

The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TranslateText200Response struct for TranslateText200Response
type TranslateText200Response struct {
	Translations []TranslateText200ResponseTranslationsInner `json:"translations,omitempty"`
}

// NewTranslateText200Response instantiates a new TranslateText200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateText200Response() *TranslateText200Response {
	this := TranslateText200Response{}
	return &this
}

// NewTranslateText200ResponseWithDefaults instantiates a new TranslateText200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateText200ResponseWithDefaults() *TranslateText200Response {
	this := TranslateText200Response{}
	return &this
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *TranslateText200Response) GetTranslations() []TranslateText200ResponseTranslationsInner {
	if o == nil || o.Translations == nil {
		var ret []TranslateText200ResponseTranslationsInner
		return ret
	}
	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateText200Response) GetTranslationsOk() ([]TranslateText200ResponseTranslationsInner, bool) {
	if o == nil || o.Translations == nil {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *TranslateText200Response) HasTranslations() bool {
	if o != nil && o.Translations != nil {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []TranslateText200ResponseTranslationsInner and assigns it to the Translations field.
func (o *TranslateText200Response) SetTranslations(v []TranslateText200ResponseTranslationsInner) {
	o.Translations = v
}

func (o TranslateText200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Translations != nil {
		toSerialize["translations"] = o.Translations
	}
	return json.Marshal(toSerialize)
}

type NullableTranslateText200Response struct {
	value *TranslateText200Response
	isSet bool
}

func (v NullableTranslateText200Response) Get() *TranslateText200Response {
	return v.value
}

func (v *NullableTranslateText200Response) Set(val *TranslateText200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateText200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateText200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateText200Response(val *TranslateText200Response) *NullableTranslateText200Response {
	return &NullableTranslateText200Response{value: val, isSet: true}
}

func (v NullableTranslateText200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateText200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


