/*
DeepL API

The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ListGlossaries200Response struct for ListGlossaries200Response
type ListGlossaries200Response struct {
	Glossaries []Glossary `json:"glossaries,omitempty"`
}

// NewListGlossaries200Response instantiates a new ListGlossaries200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListGlossaries200Response() *ListGlossaries200Response {
	this := ListGlossaries200Response{}
	return &this
}

// NewListGlossaries200ResponseWithDefaults instantiates a new ListGlossaries200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListGlossaries200ResponseWithDefaults() *ListGlossaries200Response {
	this := ListGlossaries200Response{}
	return &this
}

// GetGlossaries returns the Glossaries field value if set, zero value otherwise.
func (o *ListGlossaries200Response) GetGlossaries() []Glossary {
	if o == nil || o.Glossaries == nil {
		var ret []Glossary
		return ret
	}
	return o.Glossaries
}

// GetGlossariesOk returns a tuple with the Glossaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListGlossaries200Response) GetGlossariesOk() ([]Glossary, bool) {
	if o == nil || o.Glossaries == nil {
		return nil, false
	}
	return o.Glossaries, true
}

// HasGlossaries returns a boolean if a field has been set.
func (o *ListGlossaries200Response) HasGlossaries() bool {
	if o != nil && o.Glossaries != nil {
		return true
	}

	return false
}

// SetGlossaries gets a reference to the given []Glossary and assigns it to the Glossaries field.
func (o *ListGlossaries200Response) SetGlossaries(v []Glossary) {
	o.Glossaries = v
}

func (o ListGlossaries200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Glossaries != nil {
		toSerialize["glossaries"] = o.Glossaries
	}
	return json.Marshal(toSerialize)
}

type NullableListGlossaries200Response struct {
	value *ListGlossaries200Response
	isSet bool
}

func (v NullableListGlossaries200Response) Get() *ListGlossaries200Response {
	return v.value
}

func (v *NullableListGlossaries200Response) Set(val *ListGlossaries200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListGlossaries200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListGlossaries200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGlossaries200Response(val *ListGlossaries200Response) *NullableListGlossaries200Response {
	return &NullableListGlossaries200Response{value: val, isSet: true}
}

func (v NullableListGlossaries200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGlossaries200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


