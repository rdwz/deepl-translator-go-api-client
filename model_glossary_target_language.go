/*
DeepL API

The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GlossaryTargetLanguage The language in which the target texts in the glossary are specified.
type GlossaryTargetLanguage string

// List of GlossaryTargetLanguage
const (
	DE GlossaryTargetLanguage = "de"
	EN GlossaryTargetLanguage = "en"
	ES GlossaryTargetLanguage = "es"
	FR GlossaryTargetLanguage = "fr"
	JA GlossaryTargetLanguage = "ja"
)

// All allowed values of GlossaryTargetLanguage enum
var AllowedGlossaryTargetLanguageEnumValues = []GlossaryTargetLanguage{
	"de",
	"en",
	"es",
	"fr",
	"ja",
}

func (v *GlossaryTargetLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GlossaryTargetLanguage(value)
	for _, existing := range AllowedGlossaryTargetLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GlossaryTargetLanguage", value)
}

// NewGlossaryTargetLanguageFromValue returns a pointer to a valid GlossaryTargetLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGlossaryTargetLanguageFromValue(v string) (*GlossaryTargetLanguage, error) {
	ev := GlossaryTargetLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GlossaryTargetLanguage: valid values are %v", v, AllowedGlossaryTargetLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GlossaryTargetLanguage) IsValid() bool {
	for _, existing := range AllowedGlossaryTargetLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GlossaryTargetLanguage value
func (v GlossaryTargetLanguage) Ptr() *GlossaryTargetLanguage {
	return &v
}

type NullableGlossaryTargetLanguage struct {
	value *GlossaryTargetLanguage
	isSet bool
}

func (v NullableGlossaryTargetLanguage) Get() *GlossaryTargetLanguage {
	return v.value
}

func (v *NullableGlossaryTargetLanguage) Set(val *GlossaryTargetLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableGlossaryTargetLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableGlossaryTargetLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlossaryTargetLanguage(val *GlossaryTargetLanguage) *NullableGlossaryTargetLanguage {
	return &NullableGlossaryTargetLanguage{value: val, isSet: true}
}

func (v NullableGlossaryTargetLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlossaryTargetLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

