/*
DeepL API

The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TranslateDocument200Response struct for TranslateDocument200Response
type TranslateDocument200Response struct {
	// A unique ID assigned to the uploaded document and the translation process. Must be used when referring to this particular document in subsequent API requests.
	DocumentId *string `json:"document_id,omitempty"`
	// A unique key that is used to encrypt the uploaded document as well as the resulting translation on the server side. Must be provided with every subsequent API request regarding this particular document.
	DocumentKey *string `json:"document_key,omitempty"`
}

// NewTranslateDocument200Response instantiates a new TranslateDocument200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateDocument200Response() *TranslateDocument200Response {
	this := TranslateDocument200Response{}
	return &this
}

// NewTranslateDocument200ResponseWithDefaults instantiates a new TranslateDocument200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateDocument200ResponseWithDefaults() *TranslateDocument200Response {
	this := TranslateDocument200Response{}
	return &this
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *TranslateDocument200Response) GetDocumentId() string {
	if o == nil || o.DocumentId == nil {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDocument200Response) GetDocumentIdOk() (*string, bool) {
	if o == nil || o.DocumentId == nil {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *TranslateDocument200Response) HasDocumentId() bool {
	if o != nil && o.DocumentId != nil {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *TranslateDocument200Response) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetDocumentKey returns the DocumentKey field value if set, zero value otherwise.
func (o *TranslateDocument200Response) GetDocumentKey() string {
	if o == nil || o.DocumentKey == nil {
		var ret string
		return ret
	}
	return *o.DocumentKey
}

// GetDocumentKeyOk returns a tuple with the DocumentKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDocument200Response) GetDocumentKeyOk() (*string, bool) {
	if o == nil || o.DocumentKey == nil {
		return nil, false
	}
	return o.DocumentKey, true
}

// HasDocumentKey returns a boolean if a field has been set.
func (o *TranslateDocument200Response) HasDocumentKey() bool {
	if o != nil && o.DocumentKey != nil {
		return true
	}

	return false
}

// SetDocumentKey gets a reference to the given string and assigns it to the DocumentKey field.
func (o *TranslateDocument200Response) SetDocumentKey(v string) {
	o.DocumentKey = &v
}

func (o TranslateDocument200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentId != nil {
		toSerialize["document_id"] = o.DocumentId
	}
	if o.DocumentKey != nil {
		toSerialize["document_key"] = o.DocumentKey
	}
	return json.Marshal(toSerialize)
}

type NullableTranslateDocument200Response struct {
	value *TranslateDocument200Response
	isSet bool
}

func (v NullableTranslateDocument200Response) Get() *TranslateDocument200Response {
	return v.value
}

func (v *NullableTranslateDocument200Response) Set(val *TranslateDocument200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateDocument200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateDocument200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateDocument200Response(val *TranslateDocument200Response) *NullableTranslateDocument200Response {
	return &NullableTranslateDocument200Response{value: val, isSet: true}
}

func (v NullableTranslateDocument200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateDocument200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


