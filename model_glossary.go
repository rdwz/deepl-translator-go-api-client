/*
DeepL API

The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Glossary struct for Glossary
type Glossary struct {
	// A unique ID assigned to a glossary.
	GlossaryId *string `json:"glossary_id,omitempty"`
	// Name associated with the glossary.
	Name *string `json:"name,omitempty"`
	// Indicates if the newly created glossary can already be used in `translate` requests. If the created glossary is not yet ready, you have to wait and check the `ready` status of the glossary before using it in a `translate` request.
	Ready *bool `json:"ready,omitempty"`
	SourceLang *GlossarySourceLanguage `json:"source_lang,omitempty"`
	TargetLang *GlossaryTargetLanguage `json:"target_lang,omitempty"`
	// The creation time of the glossary in the ISO 8601-1:2019 format (e.g.: `2021-08-03T14:16:18.329Z`).
	CreationTime *time.Time `json:"creation_time,omitempty"`
	// The number of entries in the glossary.
	EntryCount *int32 `json:"entry_count,omitempty"`
}

// NewGlossary instantiates a new Glossary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlossary() *Glossary {
	this := Glossary{}
	return &this
}

// NewGlossaryWithDefaults instantiates a new Glossary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlossaryWithDefaults() *Glossary {
	this := Glossary{}
	return &this
}

// GetGlossaryId returns the GlossaryId field value if set, zero value otherwise.
func (o *Glossary) GetGlossaryId() string {
	if o == nil || o.GlossaryId == nil {
		var ret string
		return ret
	}
	return *o.GlossaryId
}

// GetGlossaryIdOk returns a tuple with the GlossaryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetGlossaryIdOk() (*string, bool) {
	if o == nil || o.GlossaryId == nil {
		return nil, false
	}
	return o.GlossaryId, true
}

// HasGlossaryId returns a boolean if a field has been set.
func (o *Glossary) HasGlossaryId() bool {
	if o != nil && o.GlossaryId != nil {
		return true
	}

	return false
}

// SetGlossaryId gets a reference to the given string and assigns it to the GlossaryId field.
func (o *Glossary) SetGlossaryId(v string) {
	o.GlossaryId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Glossary) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Glossary) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Glossary) SetName(v string) {
	o.Name = &v
}

// GetReady returns the Ready field value if set, zero value otherwise.
func (o *Glossary) GetReady() bool {
	if o == nil || o.Ready == nil {
		var ret bool
		return ret
	}
	return *o.Ready
}

// GetReadyOk returns a tuple with the Ready field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetReadyOk() (*bool, bool) {
	if o == nil || o.Ready == nil {
		return nil, false
	}
	return o.Ready, true
}

// HasReady returns a boolean if a field has been set.
func (o *Glossary) HasReady() bool {
	if o != nil && o.Ready != nil {
		return true
	}

	return false
}

// SetReady gets a reference to the given bool and assigns it to the Ready field.
func (o *Glossary) SetReady(v bool) {
	o.Ready = &v
}

// GetSourceLang returns the SourceLang field value if set, zero value otherwise.
func (o *Glossary) GetSourceLang() GlossarySourceLanguage {
	if o == nil || o.SourceLang == nil {
		var ret GlossarySourceLanguage
		return ret
	}
	return *o.SourceLang
}

// GetSourceLangOk returns a tuple with the SourceLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetSourceLangOk() (*GlossarySourceLanguage, bool) {
	if o == nil || o.SourceLang == nil {
		return nil, false
	}
	return o.SourceLang, true
}

// HasSourceLang returns a boolean if a field has been set.
func (o *Glossary) HasSourceLang() bool {
	if o != nil && o.SourceLang != nil {
		return true
	}

	return false
}

// SetSourceLang gets a reference to the given GlossarySourceLanguage and assigns it to the SourceLang field.
func (o *Glossary) SetSourceLang(v GlossarySourceLanguage) {
	o.SourceLang = &v
}

// GetTargetLang returns the TargetLang field value if set, zero value otherwise.
func (o *Glossary) GetTargetLang() GlossaryTargetLanguage {
	if o == nil || o.TargetLang == nil {
		var ret GlossaryTargetLanguage
		return ret
	}
	return *o.TargetLang
}

// GetTargetLangOk returns a tuple with the TargetLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetTargetLangOk() (*GlossaryTargetLanguage, bool) {
	if o == nil || o.TargetLang == nil {
		return nil, false
	}
	return o.TargetLang, true
}

// HasTargetLang returns a boolean if a field has been set.
func (o *Glossary) HasTargetLang() bool {
	if o != nil && o.TargetLang != nil {
		return true
	}

	return false
}

// SetTargetLang gets a reference to the given GlossaryTargetLanguage and assigns it to the TargetLang field.
func (o *Glossary) SetTargetLang(v GlossaryTargetLanguage) {
	o.TargetLang = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *Glossary) GetCreationTime() time.Time {
	if o == nil || o.CreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *Glossary) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *Glossary) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetEntryCount returns the EntryCount field value if set, zero value otherwise.
func (o *Glossary) GetEntryCount() int32 {
	if o == nil || o.EntryCount == nil {
		var ret int32
		return ret
	}
	return *o.EntryCount
}

// GetEntryCountOk returns a tuple with the EntryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetEntryCountOk() (*int32, bool) {
	if o == nil || o.EntryCount == nil {
		return nil, false
	}
	return o.EntryCount, true
}

// HasEntryCount returns a boolean if a field has been set.
func (o *Glossary) HasEntryCount() bool {
	if o != nil && o.EntryCount != nil {
		return true
	}

	return false
}

// SetEntryCount gets a reference to the given int32 and assigns it to the EntryCount field.
func (o *Glossary) SetEntryCount(v int32) {
	o.EntryCount = &v
}

func (o Glossary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GlossaryId != nil {
		toSerialize["glossary_id"] = o.GlossaryId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Ready != nil {
		toSerialize["ready"] = o.Ready
	}
	if o.SourceLang != nil {
		toSerialize["source_lang"] = o.SourceLang
	}
	if o.TargetLang != nil {
		toSerialize["target_lang"] = o.TargetLang
	}
	if o.CreationTime != nil {
		toSerialize["creation_time"] = o.CreationTime
	}
	if o.EntryCount != nil {
		toSerialize["entry_count"] = o.EntryCount
	}
	return json.Marshal(toSerialize)
}

type NullableGlossary struct {
	value *Glossary
	isSet bool
}

func (v NullableGlossary) Get() *Glossary {
	return v.value
}

func (v *NullableGlossary) Set(val *Glossary) {
	v.value = val
	v.isSet = true
}

func (v NullableGlossary) IsSet() bool {
	return v.isSet
}

func (v *NullableGlossary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlossary(val *Glossary) *NullableGlossary {
	return &NullableGlossary{value: val, isSet: true}
}

func (v NullableGlossary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlossary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


