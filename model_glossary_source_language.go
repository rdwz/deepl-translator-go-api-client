/*
DeepL API

The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GlossarySourceLanguage The language in which the source texts in the glossary are specified.
type GlossarySourceLanguage string

// List of GlossarySourceLanguage
const (
	DE GlossarySourceLanguage = "de"
	EN GlossarySourceLanguage = "en"
	ES GlossarySourceLanguage = "es"
	FR GlossarySourceLanguage = "fr"
	JA GlossarySourceLanguage = "ja"
)

// All allowed values of GlossarySourceLanguage enum
var AllowedGlossarySourceLanguageEnumValues = []GlossarySourceLanguage{
	"de",
	"en",
	"es",
	"fr",
	"ja",
}

func (v *GlossarySourceLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GlossarySourceLanguage(value)
	for _, existing := range AllowedGlossarySourceLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GlossarySourceLanguage", value)
}

// NewGlossarySourceLanguageFromValue returns a pointer to a valid GlossarySourceLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGlossarySourceLanguageFromValue(v string) (*GlossarySourceLanguage, error) {
	ev := GlossarySourceLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GlossarySourceLanguage: valid values are %v", v, AllowedGlossarySourceLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GlossarySourceLanguage) IsValid() bool {
	for _, existing := range AllowedGlossarySourceLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GlossarySourceLanguage value
func (v GlossarySourceLanguage) Ptr() *GlossarySourceLanguage {
	return &v
}

type NullableGlossarySourceLanguage struct {
	value *GlossarySourceLanguage
	isSet bool
}

func (v NullableGlossarySourceLanguage) Get() *GlossarySourceLanguage {
	return v.value
}

func (v *NullableGlossarySourceLanguage) Set(val *GlossarySourceLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableGlossarySourceLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableGlossarySourceLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlossarySourceLanguage(val *GlossarySourceLanguage) *NullableGlossarySourceLanguage {
	return &NullableGlossarySourceLanguage{value: val, isSet: true}
}

func (v NullableGlossarySourceLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlossarySourceLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

